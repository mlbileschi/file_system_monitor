#!/usr/bin/env ruby

def import_dependencies
  require 'optparse'

  begin
    require 'rb-fsevent'
  rescue
    brew_prefix = `brew --prefix`.chomp
    homebrew_directory_gem_path = "#{brew_prefix}/rvm/gems"
    puts "Adding the directory #{homebrew_directory_gem_path} to the load path."
    $LOAD_PATH.unshift(homebrew_directory_gem_path)
  end
end

def parse_args
  help_string = 'When filesystem changes are detected, run a command.
  Kill any previous invocations of the command. Use with autosaving IDEs
  for maximum benefit (e.g. IntelliJ\'s auto save after 1 second of inactivity).
  More information is at https://github.com/mlbileschi/file_system_monitor'

  include_paths = []
  exclude_paths = []
  command = nil

  OptionParser.new do |opts|
    opts.banner = "Usage: ruby file_system_monitor.rb [options]\n\n#{help_string}\n\n"

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    opts.on("-i", "--include-path p", "Add path to watch list. Multiple paths allowed. At least one is required.") do |p|
      include_paths << p
    end

    opts.on("-x", "--exclude-pattern r", "Don't consider changes to files containing this pattern.") do |x|
      exclude_paths << x
    end


    opts.on("-c", "--command c", "Run command when something in the paths changes. Required.") do |c|
      command = c
    end

  end.parse!

  if command.nil?
    STDERR.puts('The command option is required. If you need more help, use --help.')
    exit
  end

  if include_paths.empty?
    STDERR.puts('At least one include path is required. If you need more help, use --help.')
    exit
  end

  [include_paths, exclude_paths, command]
end

def blue(s)
  "\e[34m#{s}\e[0m"
end

def run(command)
  puts blue("running #{command}")
  Process.spawn (command)
end

def kill(pid)
  puts blue("-------------------------------------killing pid #{pid}---------------------------------")
  system("kill -INT #{pid}")
end

# Tells if there's any mathces
def should_be_excluded(potential_matches, exclude_paths)
  potential_matches.each do |potential_match|
    if exclude_paths.any? { |pattern| potential_match.match(/#{pattern}/i) }
      return true
    end
  end
  false
end

import_dependencies

include_paths, exclude_paths, command = parse_args

puts blue("\nWatching paths #{include_paths}\n")
if exclude_paths.length > 0
  puts blue("but not paths containing #{exclude_paths}\n")
end

fsevent = FSEvent.new
last_pid = run(command)

fsevent.watch(include_paths) do |paths|
  if !should_be_excluded(paths, exclude_paths)
    puts blue("\nfound change to #{paths}\n")
    kill(last_pid)
    last_pid = run(command)
  end
end
fsevent.run
